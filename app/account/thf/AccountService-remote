#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from app.account.thf import AccountService
from app.account.thf.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string ping(i32 seq_id, string ball)')
  print('  Account reg(i32 seq_id, string handle, string password)')
  print('  Account login(i32 seq_id, string handle, string password)')
  print('  i32 change_pwd(i32 seq_id, string handle, string password, string new_password)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = AccountService.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 2:
    print('ping requires 2 args')
    sys.exit(1)
  pp.pprint(client.ping(eval(args[0]),args[1],))

elif cmd == 'reg':
  if len(args) != 3:
    print('reg requires 3 args')
    sys.exit(1)
  pp.pprint(client.reg(eval(args[0]),args[1],args[2],))

elif cmd == 'login':
  if len(args) != 3:
    print('login requires 3 args')
    sys.exit(1)
  pp.pprint(client.login(eval(args[0]),args[1],args[2],))

elif cmd == 'change_pwd':
  if len(args) != 4:
    print('change_pwd requires 4 args')
    sys.exit(1)
  pp.pprint(client.change_pwd(eval(args[0]),args[1],args[2],args[3],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
